//file:noinspection GroovyAssignabilityCheck
//file:noinspection GrUnresolvedAccess
buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

Object grabConstant = { String name ->
    name = name.toUpperCase(Locale.ROOT)
    def f = new File("${project.projectDir}/src/main/java/dev/sanandrea/mods/turretmod/api/TmrConstants.java").text
    def m = f =~ name + /\s*=\s*"(.*?)"/
    if( m.find() ) {
        return m.group(1)
    } else {
        throw new IllegalArgumentException("Cannot grab constant ${name}!")
    }
} as Object

version = "${grabConstant('BUILD_MCVER')}-${grabConstant('VERSION')}"
group = 'dev.sanandrea.mods'
archivesBaseName = 'TurretMod'
String[] excludes = ['*.psd', '*.bbmodel', '*.ps1']

java.toolchain.languageVersion = JavaLanguageVersion.of(8)
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
    options.debug = true
    options.debugOptions.debugLevel = 'source,lines,vars'
}

println("Java: ${System.getProperty('java.version')} | JVM: ${System.getProperty('java.vm.version')} (${System.getProperty('java.vendor')}) | Arch: ${System.getProperty('os.arch')}")
minecraft {
    mappings channel: grabConstant('BUILD_MAPPINGS_CHANNEL'), version: grabConstant('BUILD_MAPPINGS_VERSION')

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"

            mods {
                sanlib {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"

            mods {
                sanlib {
                    source sourceSets.main
                }
            }
        }

        clientSAP {
            parent minecraft.runs.client

            args '--uuid', '044d980d-5c2a-4030-95cf-cbfde69ea3cb'
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            args '--mod', grabConstant("ID"), '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                sanlib {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
	maven { // JEI
		name 'Progwml6 maven'
		url 'https://dvs1.progwml6.com/files/maven'
	}
	maven { // JEI mirror
		name 'ModMaven'
		url 'https://modmaven.dev'
	}
    maven { // TOP
        name 'tterrag maven'
        url 'https://maven.tterrag.com'
    }
    maven { // Patchouli
        name 'blamejared maven'
        url 'https://maven.blamejared.com'
    }
    maven { // SanLib
        name 'SanLib'
        url 'https://repo.repsy.io/mvn/sanandreap/sanlib'
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:' + grabConstant("BUILD_FORGEVER")

	compileOnly fg.deobf('mcjty.theoneprobe:TheOneProbe-1.16:1.16-3.1.4-22:api')
	runtimeOnly fg.deobf('mcjty.theoneprobe:TheOneProbe-1.16:1.16-3.1.4-22')
	compileOnly fg.deobf('mezz.jei:jei-1.16.5:7.7.1.121:api')
	runtimeOnly fg.deobf('mezz.jei:jei-1.16.5:7.7.1.121')
    compileOnly fg.deobf('vazkii.patchouli:Patchouli:1.16.4-53.2:api')
    runtimeOnly fg.deobf('vazkii.patchouli:Patchouli:1.16.4-53.2')
	implementation fg.deobf('de.sanandrew.mods:sanlib:1.16.5-2.0.0-SNAPSHOT')
}

processResources {
    outputs.upToDateWhen { false } // ensure resources are copied properly
    filesMatching('META-INF/mods.toml') {
        expand (version: grabConstant('VERSION'),
                name: grabConstant('NAME'))
    }
}

jar {
    exclude(excludes)
    manifest {
        attributes([
            'Specification-Title': grabConstant('ID'),
            'Specification-Vendor': 'SanAndreaP',
            'Specification-Version': '1', // We are version 1 of ourselves
            'Implementation-Title': grabConstant('ID'),
            'Implementation-Version': archiveVersion,
            'Implementation-Vendor' :'SanAndreaP',
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    finalizedBy('reobfJar')
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/maven/"
        }
    }
}

import net.minecraftforge.gradle.common.tasks.SignJar

task signJar(type: SignJar, dependsOn: jar) {
    onlyIf {
        project.hasProperty('keyStore')
    }

    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = jar.archiveFile
    outputFile = jar.archiveFile
}

build.finalizedBy signJar
publishMavenJavaPublicationToMavenRepository.dependsOn signJar
signJar.finalizedBy publish